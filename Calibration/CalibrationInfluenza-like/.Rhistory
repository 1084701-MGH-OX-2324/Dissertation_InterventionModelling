###########################################################################
# average contacts per day from POLYMOD matrices
c <- sum((contact_home + contact_other + contact_school + contact_work) %*%
(popstruc / sum(popstruc)))
# Per Year Ageing Matrix
dd <- seq(1:A) / seq(1:A)
# Create the ageing matrix, moving age groups up to account for ageing over time
ageing <- t(diff(diag(dd), lag = 1) / (5 * 365.25))
ageing <- cbind(ageing, rep(0, A)) # No ageing from the last compartment
# Initialize population-related variables
initP <- sum(popstruc) # Total population size
ageindcase <- 20 # Age of the index case (years)
aci <- floor((ageindcase / 5) + 1) # Age class of the index case
# Define the time frame for the simulation
startdate <- as.Date("2020-01-01")
stopdate <- as.Date("2020-12-31")
day_start <- as.numeric(startdate - startdate)
day_stop <- as.numeric(stopdate - startdate)
times <- seq(day_start + 1, day_stop)
# Initialize compartments
initE <- rep(0, A) # Incubating
initE[aci] <- 1 # Place index case in the E compartment
initC <- rep(0, A) # Infected and symptomatic
initH <- rep(0, A) # Hospitalized
initA <- rep(0, A) # Asymptomatic
initR <- rep(0, A) # Immune
initD <- rep(0, A) # Deceased
initI <- rep(0, A) # Placeholder for additional compartment if needed
# Calculate the initial susceptible population (non-immune)
initS <- popstruc - initE - initC - initR - initH - initA - initD
# Initial conditions for the main solution vector
Y <- c(initS, initE, initC, initH, initA, initR, initD)
# Define the indices for each compartment in the solution vector
Sindex <- 1:A
Eindex <- (A + 1):(2 * A)
Cindex <- (2 * A + 1):(3 * A)
Hindex <- (3 * A + 1):(4 * A)
Aindex <- (4 * A + 1):(5 * A)
Rindex <- (5 * A + 1):(6 * A)
Dindex <- (6 * A + 1):(7 * A)
# Iindex <- (7 * A + 1):(8 * A) # Uncomment if using an additional compartment
# Initialize lockdown variables
lock <<- 0
lockdown_start <<- 10^8
# Assign the run and case variables
run <- file
case <- n
parameters <- c(
# General
p = file[n,]$p,   # probabilty of infection given a contact
tau = file[n,]$tau, # rate of loss of immunity = 1/(average duration of immunity)
#equal for all the compartments
# C-compartent
gamma = file[n,]$gamma, # rate of incubation to unfectious stage, E to C
pc = file[n,]$pc,  # proportion of clinical cases
# pc = 0.8,
rho = file[n,]$rho, # infectiousness of clincal cases (lamdba)
nuc = file[n,]$nuc,  # rate of recovery
# H-Compartment
rhoh = file[n,]$rhoh, # infectiousness of hospital (lamdba)
nuh = file[n,]$nuh,  # rate of recovery
#### asymptomatic infections
rhoa = file[n,]$rhoa, #relative infectiousness*contacts of asymtomatic
nua = file[n,]$nua,    #recovery after asymptomatc infection
# D-compartment
report = file[n,]$report,          # proportion of all infections that are reported
#Interventions
#lockdown_start = file[n,]$`Lockdown Start`,
lockdown_duration = file[n,]$`Lockdown Duration`,
lockdown_effect = file[n,]$`Lockdown Effect`,
#lock = file[n,]$`Lock`,
#lockdown_end = file[n,]$`Lockdown End`,
#shielding effect is proportional to the age,the higher the age,
#the more the shielding (beschuetyzen bestimmter gruppen)
#shielding_effect <- seq(0, 100, by = 5)
shielding_start = file[n,]$`Shielding Start`,
shielding_duration = 365,
shielding_effect = file[n,]$`Shielding Effect`
)
#print("Parameters exit")
#parameters["shielding_duration"]
#parameters["p"]
out <- ode(y = Y, times = times, func = disease_int, parms =   parameters, method = euler)
#print("hi")
##Deaths
#t is transposing
deaths_age_groups <- t(tail(out[, (Dindex + 1)],1))
colnames(deaths_age_groups) <- "Deaths"
#print(deaths_age_groups)
inc_total_int <- parameters["gamma"] * out[, (Eindex + 1)]
dailyinc_int <- rowSums(inc_total_int)
#lines(rowSums(inc_total_int_0), col = "green")
deaths_age_groups <- t(tail(out[, (Dindex + 1)],1))
# total population per age group (remaining)
pop_int_nat <- out[, (Sindex + 1)] + out[, (Eindex + 1)] + out[, (Cindex + 1)] + out[, (Rindex + 1)] + out[, (Hindex + 1)]+ out[, (Aindex + 1)] + out[, (Dindex + 1)]
#population constant
tpop_int_nat <- rowSums(pop_int_nat)
time <- as.Date(out[, 1] + startdate)
#print(sum(popstruc) - tpop_int_nat)
# daily incidence
inc_total_int_nat <- parameters["gamma"] * out[, (Eindex + 1)]
daily_inc <- rowSums(inc_total_int_nat)
#plot(daily_inc)
##Deaths
#t is transposing
colnames(deaths_age_groups) <- "Deaths"
#IFR
inf_age_groups <- colSums(out[, (Eindex + 1)],1)*parameters["gamma"]
inf <- rowSums(out[, (Eindex + 1)],1)*parameters["gamma"]
ifr <- sum(deaths_age_groups)/sum(inf)
ifr_age_groups <- deaths_age_groups/inf_age_groups
# take the longest - covid 50 - 60 %, flu 30-40%
#R0_calc <- (parameters["p"]*c*parameters["gamma"])/(parameters["gamma"]*parameters["nuh"])
# take the longest - covid 50 - 60 %, flu 30-40%
fac_cases <- (parameters["pc"]*(1-ihr))/parameters["nuc"]
fac_hosp <- ihr/parameters["nuh"]
fac_asymp <- ((1-parameters["pc"])*(1-ihr))/parameters["nua"]
beta <- parameters["p"]*c
R0_calc <- beta * (fac_cases + fac_hosp + fac_asymp)
R0_calc <- mean(R0_calc)
##### create barplots
##### create barplots
hosps_age <- colSums(out[, (Eindex + 1)],1)*parameters["gamma"]*ihr
deaths_hosp <- colSums(out[, (Hindex + 1)],1)*hfr*parameters["nuh"]
hfr_model <- deaths_hosp/hosps_age
hfr_model_tot <- sum(deaths_age_groups)/sum(hosps_age)
#R0 https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7121564/
d_exposed <- 1 / parameters["gamma"] * parameters["rho"]
d_cases <- 1 / parameters["nuc"] + d_exposed
d_hosp <- 1 / parameters["nuh"] * parameters["rhoh"] + d_exposed
d_asym <- 1 / parameters["nua"] * parameters["rhoa"] + d_exposed
weight_cases <- (1 - ihr) * parameters["pc"]
weight_hosp <- ihr
weight_asym <- (1 - ihr) * (1 - parameters["pc"])
# Weighted average duration calculation
weighted_average_duration_i <- d_cases * weight_cases + d_hosp * weight_hosp + d_asym * weight_asym
# Doubling time calculation
dd <- mean(weighted_average_duration_i)
doub0 <- log(2) * dd / (log(inc_total_int[3 + dd] / inc_total_int[3]))
# Growth rate calculation
r <- log(2) / doub0
# Basic reproduction number calculation
Di <- mean(weighted_average_duration_i)
De <- 1 / parameters["gamma"]
R0_serial_sir <- 1 + r * Di
R0_serial_seir <- (1 + r * Di) * (1 + r * De)
# Final R0
R0_serial <- R0_serial_seir
# take the longest - covid 50 - 60 %, flu 30-40%
fac_cases <- (parameters["pc"]*(1-ihr))/parameters["nuc"]
fac_hosp <- ihr/parameters["nuh"]
fac_asymp <- ((1-parameters["pc"])*(1-ihr))/parameters["nua"]
beta <- parameters["p"]*c
R0_calc <- beta * (fac_cases + fac_hosp + fac_asymp)
R0_calc <- mean(R0_calc)
##### create barplots
#print(paste0("IFR: ", ifr))
#print(paste0("R0: ", R0_calc))
HIT <- (1-(1/R0_serial))
Attack <- sum(inf_age_groups)/sum(popstruc)
summary <- data.frame("R0" = round(R0_calc,3), "IFR" = round(ifr,3), "HIT" = round(HIT, 3), "Attach" = round(Attack, 3), "R0-serial" = round(R0_serial,2))
results_summary[[n]] <- summary
}
###########Libraries
start.time <- Sys.time()
require("deSolve")
library(deSolve)
library(readxl)
library(viridis)
library(dplyr)
library(readxl)
library(openxlsx)
library(stringr)
library(ggplot2)
library(reshape2)
##### Since the actual SIM.R is commented, comments here are not as detailed
setwd("C:/Users/mschu/OneDrive - Nexus365/Placement/ModelScratch/ALL/CalibrationFlu")
file_name <- "Master_Influenza_United Kingdom_None_Range0_Steps0_ModelRuns.xlsx"
file <- read_excel("Master_Influenza_United Kingdom_None_Range0_Steps0_ModelRuns.xlsx", sheet="Runs")
results_summary <- list()
##################
# Functions
##################
### SEIR Model Function
disease_int <- function(t, Y, parameters) {
with(as.list(c(Y, parameters)), {
# Extract compartment values
S <- Y[Sindex]
E <- Y[Eindex]
C <- Y[Cindex]
H <- Y[Hindex]
A <- Y[Aindex]
R <- Y[Rindex]
D <- Y[Dindex]
# Calculate total population
P <- S + E + C + R + H + A
# Combine contact matrices
contacts <- contact_home + contact_other + contact_school + contact_work
# Lockdown logic
if (sum(H) >= hospital_beds_threshold && lock == 0) {
lock <<- 1
lockdown_start <<- t + lockdown_lag
} else if (t >= (lockdown_start + lockdown_duration)) {
lockdown_start <<- 10^8
lock <<- 0
}
# Calculate lockdown effect
lockdown <- ifelse(t >= lockdown_start & t < (lockdown_start + lockdown_duration),
(1 - lockdown_effect), 1)
# Shielding logic
shielding <- ifelse(t >= shielding_start & t < (shielding_start + shielding_duration),
1 - (shielding_effect * shielding_effect_age),
rep(1, 21))
# Force of infection
lam <- p * lockdown * (contacts %*% (shielding * (rhoa * A + rho * E + C + rhoh * H) / P))
# Differential equations
dSdt <- -S * lam + tau * R + ageing %*% S
dEdt <- S * lam - gamma * E + ageing %*% E
dCdt <- ageing %*% C + gamma * pc * (1 - ihr) * E - C * nuc
dHdt <- ageing %*% H + gamma * ihr * E - H * nuh
dAdt <- ageing %*% A + (1 - pc) * (1 - ihr) * gamma * E - nua * A
dDdt <- ageing %*% D + nuc * cfr * C + nuh * hfr * H
dRdt <- ageing %*% R + nua * A + (1 - cfr) * nuc * C + nuh * H * (1 - hfr) - tau * R
# End lockdown after one year
if (t >= 365) {
lockdown_start <<- 10^8
lock <<- 0
}
# Return the rate of change
list(c(dSdt, dEdt, dCdt, dHdt, dAdt, dRdt, dDdt))
})
}
# Years of Life Lost (YLL) Calculation Function
yll <- function(scenario, country) {
# Load life expectancy data
life_expec <- read_excel(file, sheet = "lifeexpec")
# Find the column corresponding to the specified country
col_names <- colnames(life_expec)
country_col <- which(grepl(country, col_names))
# Extract life expectancy for the specified country
expec_country <- life_expec[, country_col]
# Calculate YLL for each age group
yll_age <- scenario * expec_country
# Return the YLL per age group
return(yll_age)
}
### bar plots to compare values for age groups
barplot_ages <- function(data, metric, disease, country){
data_long <- melt(data, id.vars = "Age")
options(repr.plot.width=10, repr.plot.height=6)
y_axis_name <- paste0(metric, " - Value per Age Group")
title <- paste0(disease, " in ", country)
ggplot(data_long, aes(x = Age, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
labs(x = "Age Group Floor", y = y_axis_name, fill = "Scenario") +
ggtitle(title) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.position = "none")
}
##############################################################
#START
# Set the working directory and define the results directory
working_directory <- getwd()
result_store <- file.path(working_directory, "results")
# Create the results directory if it doesn't exist
if (!dir.exists(result_store)) {
dir.create(result_store)
}
# Set the range of simulation runs
run_start <- file$Index[1]
run_end <- nrow(file)
# Load general data from the Excel file
demog_data <- read_excel(file_name, sheet = "population", col_types = c("text"))
hospital_data <- read_excel(file_name, sheet = "hospitalbeds", col_types = c("text"))
# Define the time frame for the simulation
startdate <- as.Date("2020-01-01")
stopdate <- as.Date("2020-12-31")
day_start <- as.numeric(startdate - startdate)
day_stop <- as.numeric(stopdate - startdate)
times <- seq(day_start + 1, day_stop)
# Set initial lockdown lag
lockdown_lag <- 0
for (n in 1:(run_end-run_start+1)){
# Print the current run number
print(paste0("This is run number: ", n))
# Extract relevant data for the current run
row_index <- which(file$Index == n)
country <- file$Country[n]
disease <- file$`Disease (age curve)`[n]
scenario <- file[row_index, ]
# Match the country name with demographic data
country_names <- demog_data$country
matching_un_name_char <- country_names[str_detect(country_names, country)]
country_data <- filter(demog_data, country == matching_un_name_char[1])
# Extract population structure and set up relevant variables
popstruc <- as.numeric(country_data$population)
A <- length(popstruc) # Number of age groups
# Read disease-specific ratios
ratios <- read_excel(file_name, sheet = disease)
ihr <- ratios$ihr
hfr <- ratios$hfr
cfr <- ratios$cfr
### Lockdown Threshold Calculation
# Extract hospital-related data
population_numeric <- as.numeric(country_data$population)
col_names_hosp <- colnames(hospital_data)
country_col_hops <- which(grepl(country, col_names_hosp))
tot_pop <- sum(population_numeric)
hospital_beds_capacity <- as.numeric(hospital_data[1, country])
threshold <- as.numeric(hospital_data[2, country])
# Set hospital beds threshold and lockdown lag
# Uncomment the line below if you want to calculate the threshold based on population and capacity
# hospital_beds_threshold <- threshold * ((tot_pop / 10000) * hospital_beds_capacity)
hospital_beds_threshold <- 0
lockdown_lag <- lockdown_lag
### Shielding Effect
shielding_effect_age <- ratios$Shielding
### Load Contact Matrices
# Load contact matrices from file
contacts <- load("contacts.RDa")
# Adjust the country names to match UN data
country_names <- names(contact_home)
matching_un_name <- toString(country_names[str_detect(country_names, country)])
# Extract contact matrices for the matched country
c_home <- as.matrix(contact_home[[matching_un_name]])
c_school <- as.matrix(contact_school[[matching_un_name]])
c_work <- as.matrix(contact_work[[matching_un_name]])
c_other <- as.matrix(contact_other[[matching_un_name]])
# Calculate the number of age groups not covered by contact matrices
nce <- A - length(c_home[1, ])
# Initialize contact matrices with zeros for all age groups
contact_home <- matrix(0, nrow = A, ncol = A)
contact_school <- matrix(0, nrow = A, ncol = A)
contact_work <- matrix(0, nrow = A, ncol = A)
contact_other <- matrix(0, nrow = A, ncol = A)
# Fill in contact matrices for the existing age groups
for (i in 1:(A - nce)) {
for (j in 1:(A - nce)) {
contact_home[i, j] <- c_home[i, j]
contact_school[i, j] <- c_school[i, j]
contact_work[i, j] <- c_work[i, j]
contact_other[i, j] <- c_other[i, j]
}
}
# Fill in higher age groups with the last available age group data
for (i in (A + 1 - nce):A) {
for (j in 1:(A - nce)) {
contact_home[i, j] <- c_home[(A - nce), j]
contact_school[i, j] <- c_school[(A - nce), j]
contact_work[i, j] <- c_work[(A - nce), j]
contact_other[i, j] <- c_other[(A - nce), j]
}
}
for (i in 1:(A - nce)) {
for (j in (A + 1 - nce):A) {
contact_home[i, j] <- c_home[i, (A - nce)]
contact_school[i, j] <- c_school[i, (A - nce)]
contact_work[i, j] <- c_work[i, (A - nce)]
contact_other[i, j] <- c_other[i, (A - nce)]
}
}
for (i in (A + 1 - nce):A) {
for (j in (A + 1 - nce):A) {
contact_home[i, j] <- c_home[(A - nce), (A - nce)]
contact_school[i, j] <- c_school[(A - nce), (A - nce)]
contact_work[i, j] <- c_work[(A - nce), (A - nce)]
contact_other[i, j] <- c_other[(A - nce), (A - nce)]
}
}
###########################################################################
# average contacts per day from POLYMOD matrices
c <- sum((contact_home + contact_other + contact_school + contact_work) %*%
(popstruc / sum(popstruc)))
# Per Year Ageing Matrix
dd <- seq(1:A) / seq(1:A)
# Create the ageing matrix, moving age groups up to account for ageing over time
ageing <- t(diff(diag(dd), lag = 1) / (5 * 365.25))
ageing <- cbind(ageing, rep(0, A)) # No ageing from the last compartment
# Initialize population-related variables
initP <- sum(popstruc) # Total population size
ageindcase <- 20 # Age of the index case (years)
aci <- floor((ageindcase / 5) + 1) # Age class of the index case
# Define the time frame for the simulation
startdate <- as.Date("2020-01-01")
stopdate <- as.Date("2020-12-31")
day_start <- as.numeric(startdate - startdate)
day_stop <- as.numeric(stopdate - startdate)
times <- seq(day_start + 1, day_stop)
# Initialize compartments
initE <- rep(0, A) # Incubating
initE[aci] <- 1 # Place index case in the E compartment
initC <- rep(0, A) # Infected and symptomatic
initH <- rep(0, A) # Hospitalized
initA <- rep(0, A) # Asymptomatic
initR <- rep(0, A) # Immune
initD <- rep(0, A) # Deceased
initI <- rep(0, A) # Placeholder for additional compartment if needed
# Calculate the initial susceptible population (non-immune)
initS <- popstruc - initE - initC - initR - initH - initA - initD
# Initial conditions for the main solution vector
Y <- c(initS, initE, initC, initH, initA, initR, initD)
# Define the indices for each compartment in the solution vector
Sindex <- 1:A
Eindex <- (A + 1):(2 * A)
Cindex <- (2 * A + 1):(3 * A)
Hindex <- (3 * A + 1):(4 * A)
Aindex <- (4 * A + 1):(5 * A)
Rindex <- (5 * A + 1):(6 * A)
Dindex <- (6 * A + 1):(7 * A)
# Iindex <- (7 * A + 1):(8 * A) # Uncomment if using an additional compartment
# Initialize lockdown variables
lock <<- 0
lockdown_start <<- 10^8
# Assign the run and case variables
run <- file
case <- n
parameters <- c(
# General
p = file[n,]$p,   # probabilty of infection given a contact
tau = file[n,]$tau, # rate of loss of immunity = 1/(average duration of immunity)
#equal for all the compartments
# C-compartent
gamma = file[n,]$gamma, # rate of incubation to unfectious stage, E to C
pc = file[n,]$pc,  # proportion of clinical cases
# pc = 0.8,
rho = file[n,]$rho, # infectiousness of clincal cases (lamdba)
nuc = file[n,]$nuc,  # rate of recovery
# H-Compartment
rhoh = file[n,]$rhoh, # infectiousness of hospital (lamdba)
nuh = file[n,]$nuh,  # rate of recovery
#### asymptomatic infections
rhoa = file[n,]$rhoa, #relative infectiousness*contacts of asymtomatic
nua = file[n,]$nua,    #recovery after asymptomatc infection
# D-compartment
report = file[n,]$report,          # proportion of all infections that are reported
#Interventions
#lockdown_start = file[n,]$`Lockdown Start`,
lockdown_duration = file[n,]$`Lockdown Duration`,
lockdown_effect = file[n,]$`Lockdown Effect`,
#lock = file[n,]$`Lock`,
#lockdown_end = file[n,]$`Lockdown End`,
#shielding effect is proportional to the age,the higher the age,
#the more the shielding (beschuetyzen bestimmter gruppen)
#shielding_effect <- seq(0, 100, by = 5)
shielding_start = file[n,]$`Shielding Start`,
shielding_duration = 365,
shielding_effect = file[n,]$`Shielding Effect`
)
#print("Parameters exit")
#parameters["shielding_duration"]
#parameters["p"]
out <- ode(y = Y, times = times, func = disease_int, parms =   parameters, method = euler)
# Calculate Deaths per Age Group
deaths_age_groups <- t(tail(out[, (Dindex + 1)], 1))
colnames(deaths_age_groups) <- "Deaths"
# Calculate Incidence
inc_total_int <- parameters["gamma"] * out[, (Eindex + 1)]
dailyinc_int <- rowSums(inc_total_int)
# Total Population per Age Group (Remaining)
pop_int_nat <- out[, (Sindex + 1)] + out[, (Eindex + 1)] + out[, (Cindex + 1)] +
out[, (Rindex + 1)] + out[, (Hindex + 1)] + out[, (Aindex + 1)] +
out[, (Dindex + 1)]
tpop_int_nat <- rowSums(pop_int_nat)
time <- as.Date(out[, 1] + startdate)
# Calculate Daily Incidence
inc_total_int_nat <- parameters["gamma"] * out[, (Eindex + 1)]
daily_inc <- rowSums(inc_total_int_nat)
# Calculate Infection Fatality Rate (IFR)
inf_age_groups <- colSums(out[, (Eindex + 1)]) * parameters["gamma"]
inf <- rowSums(out[, (Eindex + 1)]) * parameters["gamma"]
ifr <- sum(deaths_age_groups) / sum(inf)
ifr_age_groups <- deaths_age_groups / inf_age_groups
# Calculate R0
fac_cases <- (parameters["pc"] * (1 - ihr)) / parameters["nuc"]
fac_hosp <- ihr / parameters["nuh"]
fac_asymp <- ((1 - parameters["pc"]) * (1 - ihr)) / parameters["nua"]
beta <- parameters["p"] * c
R0_calc <- mean(beta * (fac_cases + fac_hosp + fac_asymp))
# Calculate Hospitalization Fatality Rate (HFR)
hosps_age <- colSums(out[, (Eindex + 1)]) * parameters["gamma"] * ihr
deaths_hosp <- colSums(out[, (Hindex + 1)]) * hfr * parameters["nuh"]
hfr_model <- deaths_hosp / hosps_age
hfr_model_tot <- sum(deaths_age_groups) / sum(hosps_age)
# R0 Calculation (from literature)
d_exposed <- 1 / parameters["gamma"] * parameters["rho"]
d_cases <- 1 / parameters["nuc"] + d_exposed
d_hosp <- 1 / parameters["nuh"] * parameters["rhoh"] + d_exposed
d_asym <- 1 / parameters["nua"] * parameters["rhoa"] + d_exposed
weight_cases <- (1 - ihr) * parameters["pc"]
weight_hosp <- ihr
weight_asym <- (1 - ihr) * (1 - parameters["pc"])
# Weighted Average Duration Calculation
weighted_average_duration_i <- d_cases * weight_cases + d_hosp * weight_hosp + d_asym * weight_asym
# Doubling Time Calculation
dd <- mean(weighted_average_duration_i)
doub0 <- log(2) * dd / (log(inc_total_int[3 + dd] / inc_total_int[3]))
# Growth Rate Calculation
r <- log(2) / doub0
# Basic Reproduction Number Calculation
Di <- mean(weighted_average_duration_i)
De <- 1 / parameters["gamma"]
R0_serial_sir <- 1 + r * Di
R0_serial_seir <- (1 + r * Di) * (1 + r * De)
# Final R0
R0_serial <- R0_serial_seir
# Herd Immunity Threshold (HIT) and Attack Rate
HIT <- (1 - (1 / R0_serial))
Attack <- sum(inf_age_groups) / sum(popstruc)
summary <- data.frame("R0" = round(R0_calc,3), "IFR" = round(ifr,3), "HIT" = round(HIT, 3), "Attach" = round(Attack, 3), "R0-serial" = round(R0_serial,2))
results_summary[[n]] <- summary
}
